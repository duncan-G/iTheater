// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Models;

namespace Server.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190301045631_UpdateModelsAndSeed")]
    partial class UpdateModelsAndSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Server.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<int>("MovieId");

                    b.Property<int?>("MovieListId");

                    b.Property<int>("Rating");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MovieListId");

                    b.HasIndex("UserId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Server.Models.MovieList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Name");

                    b.Property<bool>("Private");

                    b.Property<string>("Slug");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MovieLists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2019, 2, 28, 20, 56, 31, 243, DateTimeKind.Local).AddTicks(5174),
                            Private = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2019, 2, 28, 20, 56, 31, 246, DateTimeKind.Local).AddTicks(1093),
                            Private = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2019, 2, 28, 20, 56, 31, 246, DateTimeKind.Local).AddTicks(1152),
                            Private = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2019, 2, 28, 20, 56, 31, 246, DateTimeKind.Local).AddTicks(1156),
                            Private = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2019, 2, 28, 20, 56, 31, 246, DateTimeKind.Local).AddTicks(1160),
                            Private = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2019, 2, 28, 20, 56, 31, 246, DateTimeKind.Local).AddTicks(1172),
                            Private = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(2019, 2, 28, 20, 56, 31, 246, DateTimeKind.Local).AddTicks(1176),
                            Private = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            Created = new DateTime(2019, 2, 28, 20, 56, 31, 246, DateTimeKind.Local).AddTicks(1180),
                            Private = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            Created = new DateTime(2019, 2, 28, 20, 56, 31, 246, DateTimeKind.Local).AddTicks(1183),
                            Private = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            Created = new DateTime(2019, 2, 28, 20, 56, 31, 246, DateTimeKind.Local).AddTicks(1187),
                            Private = false,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("Salt");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "a@gmail.com",
                            PasswordHash = new byte[] { 178, 214, 4, 221, 2, 27, 241, 152, 207, 136, 201, 205, 231, 57, 4, 172, 79, 166, 181, 198, 36, 68, 218, 247, 189, 183, 101, 236, 251, 14, 67, 166, 9, 158, 177, 133, 104, 53, 245, 91, 111, 107, 204, 89, 175, 17, 210, 79, 69, 94, 5, 78, 105, 195, 66, 145, 248, 196, 185, 245, 136, 132, 116, 217 },
                            Salt = new byte[] { 229, 113, 64, 124, 199, 23, 17, 9, 160, 64, 148, 9, 121, 247, 34, 231, 109, 37, 115, 76, 27, 79, 29, 74, 97, 250, 153, 247, 215, 32, 110, 192, 220, 43, 13, 103, 155, 109, 140, 197, 187, 209, 62, 51, 51, 125, 113, 240, 34, 253, 240, 196, 83, 133, 162, 36, 112, 236, 233, 96, 64, 183, 96, 97, 75, 169, 2, 133, 44, 25, 112, 66, 51, 183, 157, 106, 35, 2, 177, 19, 227, 129, 89, 251, 96, 59, 131, 57, 103, 52, 64, 31, 29, 133, 25, 127, 123, 93, 96, 177, 217, 153, 93, 56, 23, 98, 1, 153, 24, 168, 233, 18, 127, 183, 27, 12, 244, 160, 121, 40, 23, 2, 94, 9, 149, 242, 120, 204 }
                        });
                });

            modelBuilder.Entity("Server.Models.Movie", b =>
                {
                    b.HasOne("Server.Models.MovieList", "MovieList")
                        .WithMany()
                        .HasForeignKey("MovieListId");

                    b.HasOne("Server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Server.Models.MovieList", b =>
                {
                    b.HasOne("Server.Models.User", "User")
                        .WithMany("MovieLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
