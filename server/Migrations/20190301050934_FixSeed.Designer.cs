// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Models;

namespace Server.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190301050934_FixSeed")]
    partial class FixSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Server.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<int>("MovieId");

                    b.Property<int?>("MovieListId");

                    b.Property<int>("Rating");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MovieListId");

                    b.HasIndex("UserId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Server.Models.MovieList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Name");

                    b.Property<bool>("Private");

                    b.Property<string>("Slug");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MovieLists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2019, 2, 28, 21, 9, 34, 563, DateTimeKind.Local).AddTicks(5470),
                            Name = "Horror",
                            Private = false,
                            Slug = "horror-1",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2019, 2, 28, 21, 9, 34, 566, DateTimeKind.Local).AddTicks(2360),
                            Name = "Sci Fi",
                            Private = false,
                            Slug = "sci-fi-2",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2019, 2, 28, 21, 9, 34, 566, DateTimeKind.Local).AddTicks(2471),
                            Name = "2018",
                            Private = false,
                            Slug = "2018-3",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2019, 2, 28, 21, 9, 34, 566, DateTimeKind.Local).AddTicks(2495),
                            Name = "2017",
                            Private = false,
                            Slug = "2017-4",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2019, 2, 28, 21, 9, 34, 566, DateTimeKind.Local).AddTicks(2522),
                            Name = "Action",
                            Private = false,
                            Slug = "action-5",
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2019, 2, 28, 21, 9, 34, 566, DateTimeKind.Local).AddTicks(2550),
                            Name = "Drama",
                            Private = false,
                            Slug = "drama-6",
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(2019, 2, 28, 21, 9, 34, 566, DateTimeKind.Local).AddTicks(2613),
                            Name = "The Best",
                            Private = false,
                            Slug = "the-best-7",
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            Created = new DateTime(2019, 2, 28, 21, 9, 34, 566, DateTimeKind.Local).AddTicks(2653),
                            Name = "Movie Ever",
                            Private = false,
                            Slug = "movie-ever-8",
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            Created = new DateTime(2019, 2, 28, 21, 9, 34, 566, DateTimeKind.Local).AddTicks(2680),
                            Name = "Comedy",
                            Private = false,
                            Slug = "comedy-9",
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            Created = new DateTime(2019, 2, 28, 21, 9, 34, 566, DateTimeKind.Local).AddTicks(2751),
                            Name = "Romance",
                            Private = false,
                            Slug = "romance-10",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("Salt");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "a@gmail.com",
                            PasswordHash = new byte[] { 240, 179, 139, 232, 91, 0, 154, 48, 192, 128, 53, 34, 76, 80, 111, 191, 76, 7, 21, 21, 61, 218, 203, 241, 104, 90, 78, 57, 203, 106, 155, 187, 65, 215, 12, 5, 22, 80, 80, 252, 7, 147, 71, 95, 51, 62, 94, 252, 127, 232, 110, 141, 200, 142, 204, 244, 192, 129, 218, 140, 245, 55, 232, 180 },
                            Salt = new byte[] { 93, 247, 175, 62, 213, 149, 71, 0, 201, 145, 92, 210, 124, 87, 139, 115, 86, 65, 210, 158, 125, 110, 226, 36, 202, 223, 235, 210, 213, 140, 64, 204, 57, 75, 224, 15, 201, 179, 190, 29, 69, 180, 31, 135, 248, 249, 63, 207, 206, 173, 155, 188, 234, 7, 136, 242, 97, 93, 139, 235, 167, 3, 138, 47, 141, 126, 116, 181, 136, 60, 169, 209, 180, 42, 169, 249, 181, 129, 174, 8, 208, 86, 137, 255, 56, 42, 104, 45, 53, 36, 27, 9, 54, 225, 158, 93, 6, 149, 172, 19, 206, 222, 170, 213, 252, 146, 251, 43, 4, 111, 50, 41, 57, 107, 243, 61, 28, 66, 42, 170, 235, 93, 141, 14, 157, 83, 202, 34 }
                        });
                });

            modelBuilder.Entity("Server.Models.Movie", b =>
                {
                    b.HasOne("Server.Models.MovieList", "MovieList")
                        .WithMany()
                        .HasForeignKey("MovieListId");

                    b.HasOne("Server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Server.Models.MovieList", b =>
                {
                    b.HasOne("Server.Models.User", "User")
                        .WithMany("MovieLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
